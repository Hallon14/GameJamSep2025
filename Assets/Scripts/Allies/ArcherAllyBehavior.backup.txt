// Backup of ArcherAllyBehavior BEFORE kinematic separation implementation
// Date: 2025-09-24
// This file is a reference only (not compiled). To revert, replace the contents of
// ArcherAllyBehavior.cs with the code below and remove the separation system code.

using UnityEngine;

public class ArcherAllyBehavior : MonoBehaviour
{
    public float separationForce = 5f;

    private int ArcherHP;
    private int ArcherDamage;
    public float startSpeed = 8f; // Slightly faster than brute
    private float rotationspeed = 90f; // Faster orbit (degrees per second)
    public float radius = 2f; // Closer to player than brute
    Rigidbody2D rb;
    Transform player;
    float angle;
    bool reachedRadius = false;

    void Start()
    {
        ArcherHP = 1;
        rb = GetComponent<Rigidbody2D>();
        GameObject playerObj = GameObject.FindGameObjectWithTag("Player");
        if (playerObj != null)
            player = playerObj.transform;
        if (player != null)
        {
            Vector2 toArcher = rb.position - (Vector2)player.position;
            angle = Mathf.Atan2(toArcher.y, toArcher.x) * Mathf.Rad2Deg;
        }
    }

    void FixedUpdate()
    {
        if (player == null) return;
        Vector2 toArcher = rb.position - (Vector2)player.position;
        float currentDistance = toArcher.magnitude;
        if (!reachedRadius)
        {
            if (Mathf.Abs(currentDistance - radius) > 0.05f)
            {
                Vector2 desiredPos = (Vector2)player.position + toArcher.normalized * radius;
                Vector2 newPos = Vector2.MoveTowards(rb.position, desiredPos, startSpeed * Time.fixedDeltaTime);
                rb.MovePosition(newPos);
            }
            else
            {
                reachedRadius = true;
                angle = Mathf.Atan2(toArcher.y, toArcher.x) * Mathf.Rad2Deg;
            }
        }
        else
        {
            angle -= rotationspeed * Time.fixedDeltaTime;
            float angleRad = angle * Mathf.Deg2Rad;
            Vector2 orbitPos = (Vector2)player.position + new Vector2(Mathf.Cos(angleRad), Mathf.Sin(angleRad)) * radius;
            rb.MovePosition(orbitPos);
        }
    }

    void OnCollisionStay2D(Collision2D collision)
    {
        if (collision.gameObject != null &&
            collision.gameObject != this.gameObject &&
            collision.gameObject.GetComponent<ArcherAllyBehavior>() != null)
        {
            Vector2 away = (rb.position - (Vector2)collision.transform.position).normalized;
            rb.AddForce(away * separationForce, ForceMode2D.Force);
        }
    }
}

// End of backup